// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251022170845_NewInitial")]
    partial class NewInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Cities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_cities_country_id");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Domain.Countries.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_countries_title");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Domain.Feedbacks.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("place_id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_feedbacks");

                    b.HasIndex("PlaceId")
                        .HasDatabaseName("ix_feedbacks_place_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_feedbacks_user_id");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("Domain.Followers.Follower", b =>
                {
                    b.Property<Guid>("FollowerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("follower_user_id");

                    b.Property<Guid>("FollowedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("followed_user_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.HasKey("FollowerUserId", "FollowedUserId")
                        .HasName("pk_followers");

                    b.HasIndex("FollowedUserId")
                        .HasDatabaseName("ix_followers_followed_user_id");

                    b.ToTable("followers", (string)null);
                });

            modelBuilder.Entity("Domain.PlacePhotos.PlacePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsShown")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_shown");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("photo");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("place_id");

                    b.HasKey("Id")
                        .HasName("pk_place_photos");

                    b.HasIndex("PlaceId")
                        .HasDatabaseName("ix_place_photos_place_id");

                    b.ToTable("place_photos", (string)null);
                });

            modelBuilder.Entity("Domain.Places.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_places");

                    b.ToTable("places", (string)null);
                });

            modelBuilder.Entity("Domain.Places.TravelPlace", b =>
                {
                    b.Property<Guid>("TravelId")
                        .HasColumnType("uuid")
                        .HasColumnName("travel_id");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("place_id");

                    b.HasKey("TravelId", "PlaceId")
                        .HasName("pk_travel_places");

                    b.HasIndex("PlaceId")
                        .HasDatabaseName("ix_travel_places_place_id");

                    b.ToTable("travel_places", (string)null);
                });

            modelBuilder.Entity("Domain.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_title");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Domain.Travels.Travel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea")
                        .HasColumnName("image");

                    b.Property<bool>("IsDone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_done");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_travels");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_travels_user_id");

                    b.ToTable("travels", (string)null);
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("bytea")
                        .HasColumnName("avatar");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<Guid?>("CityId1")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id1");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nick_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid?>("RoleId1")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id1");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_users_city_id");

                    b.HasIndex("CityId1")
                        .HasDatabaseName("ix_users_city_id1");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.HasIndex("RoleId1")
                        .HasDatabaseName("ix_users_role_id1");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Users.UserTravel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("TravelId")
                        .HasColumnType("uuid")
                        .HasColumnName("travel_id");

                    b.Property<Guid?>("travelId")
                        .HasColumnType("uuid")
                        .HasColumnName("travel_id");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("UserId", "TravelId")
                        .HasName("pk_user_travels");

                    b.HasIndex("TravelId")
                        .HasDatabaseName("ix_user_travels_travel_id");

                    b.HasIndex("travelId")
                        .HasDatabaseName("ix_user_travels_travel_id1");

                    b.HasIndex("userId")
                        .HasDatabaseName("ix_user_travels_user_id");

                    b.ToTable("user_travels", null, t =>
                        {
                            t.Property("travelId")
                                .HasColumnName("travel_id1");

                            t.Property("userId")
                                .HasColumnName("user_id1");
                        });
                });

            modelBuilder.Entity("Domain.Cities.City", b =>
                {
                    b.HasOne("Domain.Countries.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cities_countries_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Feedbacks.Feedback", b =>
                {
                    b.HasOne("Domain.Places.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_places_place_id");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_users_user_id");

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Followers.Follower", b =>
                {
                    b.HasOne("Domain.Users.User", "FollowedUser")
                        .WithMany()
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_followers_users_followed_user_id");

                    b.HasOne("Domain.Users.User", "FollowerUser")
                        .WithMany()
                        .HasForeignKey("FollowerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_followers_users_follower_user_id");

                    b.Navigation("FollowedUser");

                    b.Navigation("FollowerUser");
                });

            modelBuilder.Entity("Domain.PlacePhotos.PlacePhoto", b =>
                {
                    b.HasOne("Domain.Places.Place", "Place")
                        .WithMany("PlacePhotos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_place_photos_places_place_id");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Domain.Places.TravelPlace", b =>
                {
                    b.HasOne("Domain.Places.Place", "place")
                        .WithMany("Travels")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_travel_places_places_place_id");

                    b.HasOne("Domain.Travels.Travel", "travel")
                        .WithMany("Places")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_travel_places_travels_travel_id");

                    b.Navigation("place");

                    b.Navigation("travel");
                });

            modelBuilder.Entity("Domain.Travels.Travel", b =>
                {
                    b.HasOne("Domain.Users.User", "User")
                        .WithMany("Travels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_travels_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.Cities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_users_cities_city_id");

                    b.HasOne("Domain.Cities.City", null)
                        .WithMany("Users")
                        .HasForeignKey("CityId1")
                        .HasConstraintName("fk_users_cities_city_id1");

                    b.HasOne("Domain.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_role_id");

                    b.HasOne("Domain.Roles.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId1")
                        .HasConstraintName("fk_users_roles_role_id1");

                    b.Navigation("City");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Users.UserTravel", b =>
                {
                    b.HasOne("Domain.Travels.Travel", null)
                        .WithMany("Members")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_travels_travels_travel_id");

                    b.HasOne("Domain.Users.User", null)
                        .WithMany("UserTravels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_travels_users_user_id");

                    b.HasOne("Domain.Travels.Travel", "travel")
                        .WithMany()
                        .HasForeignKey("travelId")
                        .HasConstraintName("fk_user_travels_travels_travel_id1");

                    b.HasOne("Domain.Users.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .HasConstraintName("fk_user_travels_users_user_id1");

                    b.Navigation("travel");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.Cities.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Countries.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Places.Place", b =>
                {
                    b.Navigation("PlacePhotos");

                    b.Navigation("Travels");
                });

            modelBuilder.Entity("Domain.Roles.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Travels.Travel", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Navigation("Travels");

                    b.Navigation("UserTravels");
                });
#pragma warning restore 612, 618
        }
    }
}
